#include <nlohmann/json.hpp>
#include "../db/db.hxx"
class OU///Joystick - класс отвечающий за работу с органами управления 
{

private:
DB OU_DB_general_in;///<БД для работы со стандартизированными джойстиками
DB OU_DB_MSKBO_in;///<TODO:еще не интегрированая БД для работы с кабиной МСКБО
DB OU_DB_MSKBO_out;///<БД с предобработынными входными данными

/// @name Блок констант джойстика, были подобраны вручную для каждого из джойстиков
///@{
    double Eps = 0.01;///<Погрешность определения показаний джойстиков в нейтральном положении по умолчанию
    double x_deadzone_const;///<Константа зоны нечувствительности джойстика по линейной оси X
    double x_base_value;///<Нейтральное положение джойстика по линейной оси X
    double y_deadzone_const;///<Константа зоны нечувствительности джойстика по линейной оси Y
    double y_base_value;///<Нейтральное положение джойстика по линейной оси Y
    double z_deadzone_const;///<Константа зоны нечувствительности джойстика по линейной оси Z
    double z_base_value;///<Нейтральное положение джойстика по линейной оси Z
    double x_rot_deadzone_const;///<Константа зоны нечувствительности джойстика по оси вращения X
    double x_rot_base_value;///<Нейтральное положение джойстика оси вращения X
    double y_rot_deadzone_const;///<Константа зоны нечувствительности джойстика по оси вращения Y
    double y_rot_base_value;///<Нейтральное положение джойстика по оси вращения Y
    double z_rot_deadzone_const;///<Константа зоны нечувствительности джойстика по оси вращения Z
    double z_rot_base_value;///<Нейтральное положение джойстика по оси вращения Z
///@}
public:

/// @name Блок выходных данных от таймера

///@{
unsigned long tick;///< Тик таймера МСКБО, выдаваемым диспетчером
unsigned long prevTick;///< Предыдущий тик таймера МСКБО, храниться локально и нужен для выполнения логики МСКБО синхронизации
///@}
/// @name Блок выходных данных от таймера
///

///@{
short go;///< Разрешение запуска основного цикла от диспетчера

short timerReady;///<Признак готовности модели (подключение к таймеру). Ключ в json "timerReady"

short initReady;///<Признак проведенной инициализации модели. Ключ в json "initReady"
///@}
DB Timerdb;///<Объект базы данных таймеров, данные поступают от диспетчера МСКБО.
using json = nlohmann::json;///<Пространство имен, показывающее что объект типа JSON использует библиотеку nlohman JSON
json CONFdata;///<Конфигурационный файл.
json Timerdata;///<Данные таймера.
json Jmskbo;///<Входные данные от джойстиков, от модифицированной программы XOutput.
json J_LA;///<выходные данные, хранит данные джойстику в удобном для пользователя формате. Формат зависит от конкретного джойстика, можно узнать параметры командой printJoi()
std::string Timer_db_name;///<Имя ключа входных данных 
std::string Input_general_ou_db_name;///<Имя ключа входных данных от реального джойстика в БД
std::string Input_cabin_db_name;///<Входные данные от кабины
std::string Output_mskbo_db_name;///<Выходные данные органов управления(переименовать в ОУ)
struct j_models{
bool saitek_x52;///<<IMG SRC="https://www.saitek.com/uk/imgs/product/x52/Saitek-X52-Flight-Control-System-01.jpg "> 
bool JA165;///<<IMG SRC="https://avatars.mds.yandex.net/get-mpic/4080439/img_id3310239157473266349.jpeg/13hq "> 
bool pedal;///<<IMG SRC="https://resource.logitechg.com/content/dam/gaming/en/products/flight-rudder-pedals/flight-rudder-pedals-gallery-1.png "> 
}j_model_connected;///<экземпляр данной стуктуры по умолчанию, заполняется функцией initJoi()
/*! \struct j_models input_mskbo.hxx "input_mskbo/input_mskbo.hxx"
 *  \brief Хранит определенную функцией initJoi() модель подключенного джойстика, где false джойстик не подключен, true джойстик подключен. 
 */


bool initJoi();///<получает данные о джойстике по сети. <B>Неявно инициализирует базу данных, делает первичный запрос для проверки работы данной базы</B> 

bool syncStart();///<Опрашивает таймер МСКБО и синхронно запускает модель в рабочий режим по команде go 
bool inDataJoi();///<получает данные о джойстике по сети. Неявно вызывает базу данных и делает запрос к базе данных для обновления данных
bool updateDataJoi();///<перепаковывает данные об джойстике
bool outDataJoi();///<отправляет данные о джойстике по сети. Неявно вызывает базу данных и делает запрос к базе данных для обновления данных

bool normalizeJoi();///<нормализирует полученные данные джойстика, устраняя дреф нуля
void toFileJoi();///<сохраняет данные, полученные от джойстика, в файл. Для отладочных целей
void printInitJoi();///<выводит какой джойстик подключен, и данные основные обработанные данные джойстика на консоль
void printJoi();///<выводит какой джойстик подключен, и данные основные обработанные данные джойстика на консоль
};